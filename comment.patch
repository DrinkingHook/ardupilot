diff --git a/ArduCopter/Copter.cpp b/ArduCopter/Copter.cpp
index 8e29528723..1d60435192 100644
--- a/ArduCopter/Copter.cpp
+++ b/ArduCopter/Copter.cpp
@@ -670,14 +670,18 @@ void Copter::uart_sensor_loop()
 }
 
 // update_batt_compass - read battery and compass
+// 翻译：更新电池和指南针
 // should be called at 10hz
+// 翻译：应在10hz时调用
 void Copter::update_batt_compass(void)
 {
     // read battery before compass because it may be used for motor interference compensation
+    // 翻译：在指南针之前读取电池，因为它可能用于电动机干扰补偿
     battery.read();
 
     if(AP::compass().available()) {
         // update compass with throttle value - used for compassmot
+        // 翻译：使用油门值更新指南针 - 用于指南针
         compass.set_throttle(motors->get_throttle());
         compass.set_voltage(battery.voltage());
         compass.read();
@@ -711,6 +715,7 @@ void Copter::loop_rate_logging()
 void Copter::ten_hz_logging_loop()
 {
     // always write AHRS attitude at 10Hz
+    // 翻译：始终在10Hz写入AHRS姿态
     ahrs.Write_Attitude(attitude_control->get_att_target_euler_rad() * RAD_TO_DEG);
     // log attitude controller data if we're not already logging at the higher rate
     if (should_log(MASK_LOG_ATTITUDE_MED) && !should_log(MASK_LOG_ATTITUDE_FAST) && !copter.flightmode->logs_attitude()) {
@@ -793,18 +798,23 @@ void Copter::twentyfive_hz_logging()
 void Copter::three_hz_loop()
 {
     // check if we've lost contact with the ground station
+    // 翻译：检查我们是否失去了与地面站的联系
     failsafe_gcs_check();
 
     // check if we've lost terrain data
+    // 翻译：检查我们是否丢失了地形数据
     failsafe_terrain_check();
 
     // check for deadreckoning failsafe
+    // 翻译：检查死算术故障安全
     failsafe_deadreckon_check();
 
-    //update transmitter based in flight tuning
+    // update transmitter based in flight tuning
+    // 翻译：基于飞行调谐更新发射器
     tuning();
 
     // check if avoidance should be enabled based on alt
+    // 翻译：检查是否应根据高度启用规避
     low_alt_avoidance();
 }
 
@@ -838,19 +848,23 @@ void Copter::one_hz_loop()
         update_using_interlock();
 
         // check the user hasn't updated the frame class or type
+        // 翻译：检查用户是否更新了框架类或类型
         motors->set_frame_class_and_type((AP_Motors::motor_frame_class)g2.frame_class.get(), (AP_Motors::motor_frame_type)g.frame_type.get());
 
 #if FRAME_CONFIG != HELI_FRAME
         // set all throttle channel settings
+        // 翻译：设置所有油门通道设置
         motors->update_throttle_range();
 #endif
     }
 
     // update assigned functions and enable auxiliary servos
+    // 翻译：更新分配的功能并启用辅助伺服
     AP::srv().enable_aux_servos();
 
 #if HAL_LOGGING_ENABLED
     // log terrain data
+    // 翻译：记录地形数据
     terrain_logging();
 #endif
 
@@ -886,10 +900,12 @@ void Copter::one_hz_loop()
 void Copter::init_simple_bearing()
 {
     // capture current cos_yaw and sin_yaw values
+    // 翻译：捕获当前的cos_yaw和sin_yaw值
     simple_cos_yaw = ahrs.cos_yaw();
     simple_sin_yaw = ahrs.sin_yaw();
 
     // initialise super simple heading (i.e. heading towards home) to be 180 deg from simple mode heading
+    // 翻译：将超级简单的标题（即指向家的标题）初始化为简单模式标题的180度
     super_simple_last_bearing = wrap_360_cd(ahrs.yaw_sensor+18000);
     super_simple_cos_yaw = simple_cos_yaw;
     super_simple_sin_yaw = simple_sin_yaw;
@@ -903,11 +919,13 @@ void Copter::init_simple_bearing()
 }
 
 // update_simple_mode - rotates pilot input if we are in simple mode
+// 翻译：更新简单模式 - 如果我们处于简单模式，则旋转飞行员输入
 void Copter::update_simple_mode(void)
 {
     float rollx, pitchx;
 
     // exit immediately if no new radio frame or not in simple mode
+    // 翻译：如果没有新的无线电帧或不在简单模式下，则立即退出
     if (simple_mode == SimpleMode::NONE || !ap.new_radio_frame) {
         return;
     }
@@ -969,9 +987,11 @@ void Copter::read_AHRS(void)
 }
 
 // read baro and log control tuning
+// 翻译：读取气压计并记录控制调谐
 void Copter::update_altitude()
 {
     // read in baro altitude
+    // 翻译：读取气压计高度
     read_barometer();
 
 #if HAL_LOGGING_ENABLED
@@ -998,6 +1018,7 @@ bool Copter::get_wp_distance_m(float &distance) const
 }
 
 // vehicle specific waypoint info helpers
+// 翻译：车辆特定的航点信息助手
 bool Copter::get_wp_bearing_deg(float &bearing) const
 {
     // see GCS_MAVLINK_Copter::send_nav_controller_output()
@@ -1006,6 +1027,7 @@ bool Copter::get_wp_bearing_deg(float &bearing) const
 }
 
 // vehicle specific waypoint info helpers
+// 翻译：车辆特定的航点信息助手
 bool Copter::get_wp_crosstrack_error_m(float &xtrack_error) const
 {
     // see GCS_MAVLINK_Copter::send_nav_controller_output()
@@ -1014,6 +1036,7 @@ bool Copter::get_wp_crosstrack_error_m(float &xtrack_error) const
 }
 
 // get the target earth-frame angular velocities in rad/s (Z-axis component used by some gimbals)
+// 翻译：获取目标地球框架角速度（rad/s）（Z轴分量用于某些云台）
 bool Copter::get_rate_ef_targets(Vector3f& rate_ef_targets) const
 {
     // always returns zero vector if landed or disarmed
diff --git a/ArduCopter/config.h b/ArduCopter/config.h
index 1d146420d0..aa95501aa2 100644
--- a/ArduCopter/config.h
+++ b/ArduCopter/config.h
@@ -49,7 +49,7 @@
 // FRAME_CONFIG
 //
 #ifndef FRAME_CONFIG
- # define FRAME_CONFIG   HELI_FRAME
+ # define FRAME_CONFIG   MULTICOPTER_FRAME
 #endif
 
 /////////////////////////////////////////////////////////////////////////////////
diff --git a/ArduCopter/sensors.cpp b/ArduCopter/sensors.cpp
index 7b81ce2230..5e4d6467d2 100644
--- a/ArduCopter/sensors.cpp
+++ b/ArduCopter/sensors.cpp
@@ -1,6 +1,7 @@
 #include "Copter.h"
 
 // return barometric altitude in centimeters
+// 翻译：返回气压高度（以厘米为单位）
 void Copter::read_barometer(void)
 {
     barometer.update();
@@ -8,6 +9,7 @@ void Copter::read_barometer(void)
     baro_alt = barometer.get_altitude() * 100.0f;
 }
 
+// 测距仪
 #if AP_RANGEFINDER_ENABLED
 void Copter::init_rangefinder(void)
 {
@@ -22,6 +24,7 @@ void Copter::init_rangefinder(void)
 }
 
 // return rangefinder altitude in centimeters
+// 翻译：返回测距仪高度（以厘米为单位）
 void Copter::read_rangefinder(void)
 {
     rangefinder.update();
diff --git a/libraries/AP_AHRS/AP_AHRS.cpp b/libraries/AP_AHRS/AP_AHRS.cpp
index fa00364047..376cd1706d 100644
--- a/libraries/AP_AHRS/AP_AHRS.cpp
+++ b/libraries/AP_AHRS/AP_AHRS.cpp
@@ -393,16 +393,20 @@ void AP_AHRS::update(bool skip_ins_update)
 {
     // periodically checks to see if we should update the AHRS
     // orientation (e.g. based on the AHRS_ORIENTATION parameter)
+    // 翻译：定期检查以查看我们是否应该更新AHRS方向（例如，基于AHRS_ERINIENTATION参数）
     // allow for runtime change of orientation
     // this makes initial config easier
+    // 允许运行时更改方向，这使初始配置更容易
     update_orientation();
 
     if (!skip_ins_update) {
         // tell the IMU to grab some data
+        // 翻译：告诉IMU获取一些数据
         AP::ins().update();
     }
 
     // support locked access functions to AHRS data
+    // 翻译：支持对AHRS数据的锁定访问函数
     WITH_SEMAPHORE(_rsem);
 
     // see if we have to restore home after a watchdog reset:
diff --git a/libraries/AP_AHRS/AP_AHRS_Backend.cpp b/libraries/AP_AHRS/AP_AHRS_Backend.cpp
index 4a655b1c6a..abb507665b 100644
--- a/libraries/AP_AHRS/AP_AHRS_Backend.cpp
+++ b/libraries/AP_AHRS/AP_AHRS_Backend.cpp
@@ -68,6 +68,7 @@ void AP_AHRS::add_trim(float roll_in_radians, float pitch_in_radians, bool save_
 }
 
 // Set the board mounting orientation from AHRS_ORIENTATION parameter
+// 翻译：从AHRS_ORIENTATION参数设置板载安装方向
 void AP_AHRS::update_orientation()
 {
     const uint32_t now_ms = AP_HAL::millis();
diff --git a/libraries/AP_Baro/AP_Baro.cpp b/libraries/AP_Baro/AP_Baro.cpp
index 10ee0c6552..6637d89e99 100644
--- a/libraries/AP_Baro/AP_Baro.cpp
+++ b/libraries/AP_Baro/AP_Baro.cpp
@@ -798,6 +798,7 @@ bool AP_Baro::should_log() const
 
 /*
   call update on all drivers
+  翻译: 更新所有驱动程序
  */
 void AP_Baro::update(void)
 {
diff --git a/libraries/AP_BattMonitor/AP_BattMonitor.cpp b/libraries/AP_BattMonitor/AP_BattMonitor.cpp
index 16883af65e..0fdfca93b6 100644
--- a/libraries/AP_BattMonitor/AP_BattMonitor.cpp
+++ b/libraries/AP_BattMonitor/AP_BattMonitor.cpp
@@ -1154,6 +1154,7 @@ bool AP_BattMonitor::arming_checks(size_t buflen, char *buffer) const
 }
 
 // Check's each smart battery instance for its powering off state and broadcasts notifications
+// 翻译：检查每个智能电池实例是否有电源并广播通知
 void AP_BattMonitor::checkPoweringOff(void)
 {
     for (uint8_t i = 0; i < _num_instances; i++) {
diff --git a/libraries/AP_InertialSensor/AP_InertialSensor.cpp b/libraries/AP_InertialSensor/AP_InertialSensor.cpp
index aca57cb8b8..84ce2c839a 100644
--- a/libraries/AP_InertialSensor/AP_InertialSensor.cpp
+++ b/libraries/AP_InertialSensor/AP_InertialSensor.cpp
@@ -1890,10 +1890,12 @@ void AP_InertialSensor::set_primary(uint8_t instance)
 
 /*
   update gyro and accel values from backends
+  翻译: 更新来自后端的陀螺仪和加速度计值
  */
 void AP_InertialSensor::update(void)
 {
     // during initialisation update() may be called without
+    // 翻译：在初始化期间可以不用
     // wait_for_sample(), and a wait is implied
     wait_for_sample();
 
